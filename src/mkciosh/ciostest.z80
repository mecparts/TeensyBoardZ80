	org	100h
;	
_BDwboot	equ	0
_BDconin	equ	1
_BDconout	equ	2
_BDrdrin	equ	3
_BDpunout	equ	4
_BDconio	equ	6
_BDstrout	equ	9
_BDstrin	equ	10
_BDconst	equ	11
_BDdelay	equ	141
;
	ld	sp,stack
	ld	e,'H'
	ld	c,_BDconout
	call	start
	ld	e,'i'
	ld	c,_BDconout
	call	start
	ld	e,CR
	ld	c,_BDconout
	call	start
	ld	e,LF
	ld	c,_BDconout
	call	start
	ld	de,msg2		; Talking to modem
	ld	c,_BDstrout
	call	start
	ld	c,_BDpunout
	ld	e,'A'
	call	start
	ld	c,_BDpunout
	ld	e,'T'
	call	start
	ld	c,_BDpunout
	ld	e,'I'
	call	start
	ld	c,_BDpunout
	ld	e,CR
	call	start
	ld	c,_BDdelay
	ld	de,200
	call	start
mdmloop:
	ld	c,_BDdelay
	ld	de,5
	call	start
	call	bios+39H
	ld	a,l
	or	a
	jr	z,nomore
	ld	c,_BDrdrin
	call	start
	ld	c,_BDconout
	ld	e,a
	call	start
	jr	mdmloop
nomore:
	ld	c,_BDstrout
	ld	de,msg3		; 1 second delay
	call	start
	ld	c,_BDdelay
	ld	de,1000
	call	start
;-------------------------------
	ld	de,msg4a	; BDOS 1 Press a key:
	ld	c,_BDstrout
	call	start
	ld	c,_BDconin
	call	start		; BDOS 1 (CONIN) echo
	ld	e,a
	ld	c,_BDconout
	call	start		; BDOS 2 (CONOUT) re-echo
;-------------------------------
	ld	de,msg4b	; BDOS 6 FF Press a key:
	ld	c,_BDstrout
	call	start
	ld	c,_BDconio
	ld	e,0ffh
	call	start		; BDOS 6 FF (CONIO input)
	ld	c,_BDconout
	ld	e,a
	call	start
;-------------------------------
	ld	c,_BDstrout
	ld	de,msg4c	; BDOS 6 FE Press a key:
	call	start
loopit:	ld	c,_BDconio
	ld	e,0feh
	call	start		; BDOS 6 FE (CONIO status)
	or	a
	jr	z,loopit
	ld	c,_BDconio
	ld	e,0ffh
	call	start		; BDOS 6 FF (CONIO input)
	ld	c,_BDconio
	ld	e,a
	call	start
	ld	c,_BDconout	; BDOS 2 (CONOUT) echo
	ld	e,a
	call	start
;-------------------------------
	ld	c,_BDstrout
	ld	de,msg4d	; BDOS 6 FD Press a key:
	call	start
	ld	c,_BDconio
	ld	e,0fdh
	call	start		; BDOS 6 FD (CONIO in wait)
	ld	c,_BDconout	; BDOS 2 (CONOUT) echo
	ld	e,a
	call	start
;--------------------------	
	ld	c,_BDstrout
	ld	de,msg4e		; BDOS 11 Press a key:
	call	start
cstlp:	ld	c,_BDconst
	call	start		; BDOS 11 (CONST)
	or	a
	jr	z,cstlp
	ld	c,_BDconin	; BDOS 2 (CONIN) echo
	call	start

	ld	c,_BDstrout
	ld	de,msg7		; Text input->
	call	start	
	ld	c,_BDstrin
	ld	de,buff
	call	start
	
	ld	c,_BDstrout
	ld	de,msg5		; All done
	call	start
	ld	c,_BDwboot
	call	start
	ld	c,_BDstrout
	ld	de,msg6		; How did I get here?
	call	start
	jp	0
msg2:	db	'Talking to modem',cr,lf,'$'
msg3:	db	CR,LF,'1 second delay$'
msg4a:	db	CR,LF,'BDOS 1 Press a key:$'
msg4b:	db	CR,LF,'BDOS 6 FF Press a key:$'
msg4c:	db	CR,LF,'BDOS 6 FE Press a key:$'
msg4d:	db	CR,LF,'BDOS 6 FD Press a key:$'
msg4e:	db	CR,LF,'BDOS 11 Press a key:$'
msg5:	db	CR,LF,'All done',cr,lf,'$'
msg6:	db	CR,LF,'How did I get here?',cr,lf,'$'
msg7:	db	CR,LF,'Text input->$'
buff:	db	64,0
	ds	64
	ds	64
stack:
;
; CIOS : A Console I/O System for RunCPM
;
;	In a normal RunCPM system, the simulated BDOS does not
;	call the simulated BIOS. This means that ZEX (and any
;	other programs that hijack the BIOS console I/O) won't
;	work. This little bit of Z80 code fixes that.
;
;	This is he console only bits of a real BDOS so that ZEX
;	can redirect the BIOS console I/O. When other programs
;	make call BDOS console I/O calls, these routines end
;	up calling the redirected BIOS entry points.
;
;
;	March 7 2020 Wayne Hortensius
;

bios		equ	0f200h		; Change this to your BIOS jump page address

wbootBIOS	equ	bios+00003h	; system warm boot
constBIOS	equ	bios+00006h	; system console status
coninBIOS	equ	bios+00009h	; system console input
conoutBIOS	equ	bios+0000ch	; system console output
conpeekBIOS	equ	bios+0003fh	; system console input peek
;
; Internal definitions
;
ctrlC	equ	003h			; warm boot char
ctrlE	equ	005h			; break line
BS	equ	008h			; delete last char
TAB	equ	009h			; horizontal tab
LF	equ	00ah			; line feed
CR	equ	00dh			; carriage return
ctrlQ	equ	011h			; restart console output
ctrlR	equ	012h			; repeat line
ctrlS	equ	013h			; pause console output
ctrlU	equ	015h			; delete line (backspaces)
ctrlX	equ	018h			; delete line (backspaces)
ESC	equ	01Bh			; ESCape
rubout	equ	07fh			; delete last char
;
	db	'ZSDOS '		; ZSDOS id
;
; Start BDOS
;
start:	jp	entry			; Jump to entry point
;
; CP/M 2.2 Compatable Error Vector Table
;
STBDSC:	DEFW	0		; Bad sector message
STSEL:	DEFW	0		; Select error
STRO:	DEFW	0		; Drive read only
SFILRO:	DEFW	0		; File read only

; External Path Name

PATH:	DEFW	0		; Path address for file open, 0 if no path

; Wheel Byte Pointer

WHEEL:	DEFW	04BH		; Address of wheel byte, 0 if none

; User configuration byte

ZSFLAGS: DEFB	01101101B	; Flag byte set in zsdos.lib

; Dispatch table for time/date stamp routines

; ZSDOS uses all vectors in this table as indicated.  ZDDOS uses all but
; STUPDV, GETSTV, and PUTSTV.  STCRV is used to store the address of the
; stamp for ZDDOS, thus allowing ZSCONFIG to enable and disable stamping
; of Last Access and Modify.

GSTIME:	DEFW	0		; Address of get/set time/date routine (hfb)
STLAV:	DEFW	0		; Address of stamp last access routine
STCRV:	DEFW	0		; Address of stamp create routine
STUPDV:	DEFW	0		; Address of stamp modify routine
GETSTV:	DEFW	0		; Address of get stamp routine
PUTSTV:	DEFW	0		; Address of set stamp routine
	DEFW	0		; Dummy vector to disable with ZSCONFIG
UNLOAD:	DEFW	0		; Pointer to remove Time Stamp routine

	PAGE
;********************************************************
;*	 Z S D O S	L o w	 R A M	 D a t a	*
;********************************************************

; RAM has been moved down here to an area that is compatable with ZRDOS per
; suggestion by Hal Bower.  The actual addresses used are NOT compatable with
; ZRDOS.

; Due to ZSDOS's smaller RAM area, any program that saves RAM in accordance
; with ZRDOS's specifications for re-entry into BDOS should work under ZSDOS
; without problems.  Some code will be saved also, as well as the Flag Byte,
; but this should be no problem for IOP'S.

; The Write Protect, Login, and Hard Disk Login Vectors are kept at the top of
; ZSDOS, as they must reflect the current status of the Disk System and hence
; should NOT be saved with other system variables Under ANY Circumstance!

BGLORAM:
;--------------------------------------------------------------------
; The following locations MUST remain in EXACTLY this order

TABCNT:	DEFB	0		; Tab counter
TABCX1:	DEFB	0		; Temporary Tab counter (used by RDBUF)
;--------------------------------------------------------------------

FCONTP:	DEFB	0		; List enable flag (Control-P) - used by BGii
LASTCH:	DEFB	0		; Last character - used by BGii

;--------------------------------------------------------------------
; The following locations MUST remain in EXACTLY this order

USER:	DEFB	0		; User number - used by BGii
DEFDRV:	DEFB	0		; Default drive number - used by BGii and DS
DRIVE:	DEFB	0		; Drive number
;--------------------------------------------------------------------

FCB0:	DEFB	0		; FCB byte 0

BGHIRAM:
DMA:	DEFW	0080H		; DMA address

TRANS:	DEFW	0		; Translation vector
TEMP0:	DEFW	0		; Number of files on drive


DIRBUF:	DEFW	0		; Directory buffer pointer - used by bgii
IXP:	DEFW	0		; Disk parameter block
CSV:	DEFW	0		; Check sum pointer
ALV:	DEFW	0		; Allocation vector pointer

;--------------------------------------------------------------------
; The following locations MUST remain in EXACTLY this order
; Copy of DPB for Current Drive

MAXSEC:	DEFW	0		; Number of sectors/track
NBLOCK:	DEFB	0		; Block shift
NMASK:	DEFB	0		; Mask number of blocks
NEXTND:	DEFB	0		; Extent mask
MAXLEN:	DEFW	0		; Maximum block number-1
NFILES:	DEFW	0		; Maximum number of files-1
NDIR0:	DEFB	0		; First two entries ALV buffer
	DEFB	0		; ..(NDIR1)
NCHECK:	DEFW	0		; Number of checksum entries
NFTRK:	DEFW	0		; First track number
;--------------------------------------------------------------------
FUNCT:	DEFB	0		; Function number
PEXIT:	DEFW	0		; Exit code
;--------------------------------------------------------------------
; The following locations MUST remain in EXACTLY this order

FLDRV:	DEFB	0		; Drive select used flag
RDWR:	DEFB	0		; Read/write flag
SEARQU:	DEFB	0		; Search question mark used
SEARPU:	DEFB	0		; Search public file
;--------------------------------------------------------------------
RECDIR:	DEFW	0		; Record directory (checksum)
FILCNT:	DEFW	0		; File counter
SECPNT:	DEFB	0		; Sector pointer
SUBFLG:	DEFB	0		; Submit flag (reset disk command)

DCOPY:	DEFW	0		; Copy address FCB
SEAREX:	DEFB	0		; Exit code search
SEARNB:	DEFB	0		; Search number of bytes
ERMODE:	DEFB	0		; BDOS error mode

ARWORD:	DEFW	0		; De argument on entry - used for BGii
DEVAL:	DEFW	0		; Return value for DE reg
ZRFLGS:	DEFB	0		; ZRDOS/NovaDOS flags
SPSAVE:	DEFW	0		; Stack pointer location
	DEFS	54
IXSAVE:	DEFW	0		; User's IX register
ZSDOSS:				; ZSDOS stack
;
; Entry point BDOS commands
;
entry:	ld	a,c
	ld	(funct),a
	ld	hl,0
	ld	(pexit),hl		; Clear exit code
	ld	(spsave),sp		; Save stack pointer
	ld	sp,ZSDOSS		; Get internal stack pointer
	push	ix			; Save index register in IXSAVE
	push	de			; Save parameter register
	pop	ix			; Get it back in ix
	ld	(deval),ix		; and save it for when we exit
	ld	hl,ciosExit		; Get CIOS exit address
	push	hl			; Save it on stack to return from BDOS
	ld	a,c			; Get function code
;
	cp	maxcmd+1		; Test greater then maxcmd 
	jr	c,lowcmd		; we handle wboot and console i/o
runcpm:	
	pop	de			; get rid of ciosExit value
	push	ix			; Push original value of DE
	pop	de			; Restore original value of DE
	pop	ix			; Restore original value of IX
	ld	a,(funct)		; restore BDOS call # to C
	ld	c,a			; for RunCPM's BDOS
	ld	sp,(spsave)		; Get old sp
	in	a,(0)			; let RunCPM handle the rest
	ret
;
lowcmd:
	ld	hl,ctable		; Load table
	ld	b,0			; Prepare 16 bit add
	add	hl,bc			; Add
	add	hl,bc			; Add twice to get word value
	ld	a,(hl)			; Get LSB
	inc	hl			; Pointer to MSB
	ld	h,(hl)			; Get MSB
	ld	l,a			; Save LSB in l 
	ld	c,e			; Put argument in C for BIOS
	ld	a,e			; Put argument in A for DOS
	jp	(hl)			; Jump to routine
;
; Command table
;
;
; Func	Name			Input Parameters	Returned Values
;   0	boot			none			none
;   1	console input		none			a=character
;   2	console output		e=character		a=00h
;   6	direct console I/O	e=0ffh			a=input character
;							a=00h if no character 
;								present
;				e=0feh			a=console status
;				e=000h..0fdh		a=00h
;   9	print string		de=address string	a=00h
;  10	read console buffer	de=address buffer	a=00h
;  11	get console status	none			a=00h if no character 
;								present
;							01h if character present
ctable:	defw	wbootBIOS		; 0 Warm boot 
	defw	rdcon			; 1 Console input
	defw	wrcon			; 2 Console output
	defw	runcpm			; 3 Reader input
	defw	runcpm			; 4 Punch output	- BIOS direct
	defw	runcpm			; 5 List output		- BIOS direct
	defw	dcio			; 6 Direct console I/O
	defw	runcpm			; 7 Get I/O byte
	defw	runcpm			; 8 Set I/O byte
	defw	mess			; 9 Print string
	defw	rdbuf			; 10 Read console buffer
	defw	const			; 11 Get console status
maxcmd	equ	($-ctable)/2-1
;
;
;==================================================================
; Output char (control char = ^char)
;
outch:	call	tstch			; Test if cr,lf,tab,BS or >=space
	jr	nc,wrcon		; Yes then jump
	push	af			; Save character
	ld	a,'^'			; Load a with '^' 
	call	wrcon			; Output it
	pop	af			; Get character back
	push	af			; Save it again
	add	a,'A'-1			; Add offset
	call	wrcon			; Output it
	pop	af			; Get character
	ret				; Return to caller
;
; Test character
; Exit carry=0: cr,lf,tab,BS or >= space
;      carry=1: All other characters
;
tstch:	cp	CR			; Test carriage return
	ret	z			; Return if so
	cp	LF			; Test line feed
	ret	z			; Return if so
	cp	TAB			; Test tab
	ret	z			; Return if so
	cp	BS			; Test backspace
	ret	z			; Return if so
	cp	rubout			; test for DEL (rubout)
	ret	z			; return if so
	cp	' '			; Test >=space
	ret				; Return to caller
;
; Destructive backspace over previous char
; Entry : hl = buffer pointer
;         (IX+1) = character counter (always>0)
;
delch:	ld	a,(hl)			; fetch character to be deleted
	dec	(ix+1)			; Decrement character counter
	dec	hl
	push	ix
	push	hl
	ld	b,1			; 1 backspace for most chars
	cp	TAB			; lousy handling for TABs, I'm afraid
	jr	z,delch1
	cp	' '
	jr	nc,delch1
	inc	b			; ctrl chars need 2 backspaces
delch1:
	push	bc
	ld	c,BS			; BS, space, BS
	call	conoutBIOS
	ld	c,' '
	call	conoutBIOS
	ld	c,BS
	call	conoutBIOS
	pop	bc
	djnz	delch1
	pop	hl
	pop	ix
	ret
;	
;
;===================================================================
; BDOS 11 Test console status
;
const:	call	constBIOS		; Get console status
	jr	exit			; And return it to caller
;
; Console I/O routines
;
;===================================================================
; BDOS 1 console input
;
; Read character from console and echo
;
rdcon:	call	coninBIOS		; Get character
	push	af
	ld	c,a
	call	conoutBIOS		; echo character
	pop	af
exit:	ld	(pexit),a		; Return character 
	ret				; And exit BDOS
;
;
;===================================================================
; BDOS 2 write console
;
wrcon:	push	af			; Save character
	call	constBIOS
	or	a
	jr	z,wrcon1		; no input waiting
	call	conpeekBIOS
	cp	ctrlS			; ^S? (request to pause output)
	jr	nz,wrcon1		; no, output the character
	call	coninBIOS		; eat ^S
wrcon0:
	call	coninBIOS		; wait for the next character
	cp	ctrlC			; ^C?
	jp	z,resetErmode		; yes, warm boot
	cp	ctrlQ			; ^Q?
	jr	nz,wrcon0		; loop until ^Q resumes or ^C reboots
wrcon1:
	pop	af			; Get character back
	ld	c,a
	jp	conoutBIOS		; Output it
resetErmode:
	xor	a			; on ^C, reset error mode to standard
	ld	(ERMODE),a		; mode and warm boot
	jp	wbootBIOS
;
;
;===================================================================
; BDOS 6 Direct console input/output
;
dcio:	inc	e			; Test if 0ffh
	jr	z,dcin			; Yes do input
	inc	e			; Test if 0feh
	jr	z,dcstat		; Yes check input status
	inc	e			; Test if 0fdh
	jp	nz,conoutBIOS		; No, just output char (already in C)
	call	coninBIOS		; Yes, wait for character
	jr	exit			; And return it to caller
dcin:	call	constBIOS		; Get character if available
	or	a
	jr	z,exit
	call	coninBIOS
	jr	exit			; And return it to caller
dcstat:	call	constBIOS
	jr	exit			; Return status to caller
;
;
;===================================================================
; BDOS 9 Output message
;
mess:	ld	a,(de)			; Get byte from buffer
	cp	'$'			; Test last byte
	ret	z			; Yes, then return to caller
	inc	de			; Point to next byte
	push	de			; Save pointer
	call	wrcon			; Output character
	pop	de			; Restore pointer
	jr	mess			; And test again
;
;
;===================================================================
; BDOS 10 Read buffer
; In:  (IX)   -> max # characters to read
;      (IX+2) -> read buffer
; Out: (IX+1) -> # characters in buffer
;      (IX+2..) -> characters read
;
rdbuf:	push	ix
	pop	hl			; get buffer pointer in HL
	inc	hl			; point to read buffer
	ld	(ix+1),0		; clear line length counter
;
rdblp:	push	ix
	push	hl			; Save registers
rdbget:	call	coninBIOS		; Get character
	pop	hl
	pop	ix
	cp	ctrlE			; ^E new line
	jr	z,rdbnl
	cp	BS			; ^H backspace
	jr	z,rdbBS
	cp	rubout			; DEL backspace
	jr	z,rdbBS
	cp	CtrlR			; ^R retype line
	jr	z,rdbrpt
	cp	CtrlU			; ^U erase all
	jr	z,rdbera
	cp	CtrlX			; ^X erase all
	jr	z,rdbera
	cp	CR			; CR end
	jr	z,rdbeol
	cp	LF			; LF end
	jr	z,rdbeol
;
	inc	hl			; increment buffer pointer
	ld	(hl),a			; store character
	inc	(ix+1)			; increment char counter
	push	ix
	push	hl			; save registers
	call	outch			; echo character
	pop	hl			; restore registers
	pop	ix
	ld	a,(hl)
	cp	CtrlC
	jr	z,rdbC			; handle ^C
	ld	a,(ix+1)		; get line count
	cp	(ix+0)			; test line length=maximum line length
	jr	nz,rdblp
rdbeol:	ld	a,cr			; echo a carriage return
	jp	wrcon
;
rdbC:	ld	a,(ix+1)
	dec	a			; is ^C the first char?
	jr	nz,rdblp		; no, ignore it
	xor	a			; reset error mode to CP/M standard
	ld	(ERMODE),a		; when we warm boot due to ^C
	jp	0
;
rdbNl:	push	ix
	push	hl			; Save registers
	ld	a,cr			; move cursor to
	call	wrcon			; start of next line
	ld	a,lf
	call	wrcon
	jr	rdbget			; and get next char
;
rdbBS:	ld	a,(ix+1)		; test if empty line
	or	a
	call	nz,delch		; no, delete last character
	jr	rdblp			; get next character
;
rdbera:	ld	a,(ix+1)		; Test if last character deleted
	or	a
	jr	z,rdblp			; Yes, ready for new input
	call	delch			; Delete last character line
	jr	rdbera			; Test last character deleted
;
rdbrpt:	push	ix			; redraw the current line
	push	hl
	ld	a,cr			; start a new line
	call	wrcon
	ld	a,lf
	call	wrcon
	push	ix
	pop	hl
	inc	hl
	inc	hl
	ld	b,(ix+1)		; get # of characters in line
	ld	a,b
	or	a
	jr	z,rptdone		; if it's empty, we're all done
rptloop:
	push	hl
	push	bc
	ld	a,(hl)
	call	outch			; write each character
	pop	bc
	pop	hl
	inc	hl
	djnz	rptloop
rptdone:
	jp	rdbget
;
; ---------------------------------------------------------
; CIOS exit routine
;  If the error handler was invoked, the stack is in an undefined
;  condition at this point.  We therefore have to restore the user's
;  IX register independent of stack position.  Thanks to Joe Wright's
;  eagle eye for catching this one!

ciosExit:
	ld	sp,(spsave)	; Restore user stack
	ld	ix,(ixsave)	; Restore IX (stack is don't care)
	ld	de,(deval)	; Restore DE 
	ld	hl,(pexit)	; Get exit code
	ld	a,(funct)	; Get function code
	ld	c,a		; Restore c
	ld	a,l		; Copy function code
	ld	b,h
	ret			; And return to caller

	end
